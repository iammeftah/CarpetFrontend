<main id="gallery" className="container mx-auto px-4 py-16">
                <h2  className="text-4xl font-bold text-center mb-12 text-neutral-800 dark:text-neutral-200">
                    Notre Collection de Tapis
                </h2>

                <div className="mb-8">
                    <div  className="flex flex-col md:flex-row items-center justify-between mb-4 gap-4">
                        <div className="relative w-full md:w-1/4">
                            <input
                                className="w-full bg-white dark:bg-neutral-800 outline-none rounded-xl border border-neutral-300 dark:border-neutral-700 px-4 py-2 pr-10 text-sm text-neutral-800 dark:text-neutral-200 transition-all duration-200"
                                placeholder="Rechercher..."
                                type="search"
                                onChange={(e) => setSearchTerm(e.target.value)}
                            />
                            <Search
                                className="absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-neutral-400 dark:text-neutral-500"/>
                        </div>
                        <div className="flex gap-2 relative">
                            {[
                                {name: "Catégorie", options: categories},
                                {name: "Prix", options: ["€0 - €1000", "€1000 - €3000", "€3000 - €6000"]},
                                {name: "Trier par", options: ["Prix: Croissant", "Prix: Décroissant"]}
                            ].map((filter) => (
                                <div key={filter.name} className="relative">
                                    <button
                                        onClick={() => toggleDropdown(filter.name)}
                                        className="px-4 py-2 text-sm font-medium border border-neutral-300 dark:border-neutral-700 rounded-md bg-white dark:bg-neutral-800 text-neutral-800 dark:text-neutral-200 hover:bg-neutral-100 dark:hover:bg-neutral-700 focus:outline-none focus:ring-2 focus:ring-neutral-400 transition-all duration-300 flex items-center"
                                    >
                                        {filter.name} <ChevronDown className="ml-2 h-4 w-4"/>
                                    </button>
                                    <AnimatePresence>
                                        {activeDropdown === filter.name && (
                                            <motion.div
                                                initial={{opacity: 0, y: -10}}
                                                animate={{opacity: 1, y: 0}}
                                                exit={{opacity: 0, y: -10}}
                                                transition={{duration: 0.2}}
                                                className="absolute z-10 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-neutral-800 ring-1 ring-black ring-opacity-5 overflow-hidden"
                                            >
                                                <div className="py-1 max-h-60 overflow-y-auto">
                                                    {filter.options.map((option) => (
                                                        <button
                                                            key={option}
                                                            onClick={() => {
                                                                if (filter.name === "Catégorie") {
                                                                    setSelectedCategory(option);
                                                                } else if (filter.name === "Prix") {
                                                                    const [min, max] = option.split(" - ").map(price => parseInt(price.replace("€", "")));
                                                                    setPriceRange([min, max]);
                                                                } else if (filter.name === "Trier par") {
                                                                    setSortOption(option === "Prix: Croissant" ? "price-asc" : "price-desc");
                                                                }
                                                                setActiveDropdown("");
                                                            }}
                                                            className="block w-full text-left px-4 py-2 text-sm text-neutral-700 dark:text-neutral-200 hover:bg-neutral-100 dark:hover:bg-neutral-700"
                                                        >
                                                            {option}
                                                        </button>
                                                    ))}
                                                </div>
                                            </motion.div>
                                        )}
                                    </AnimatePresence>
                                </div>
                            ))}
                        </div>
                    </div>

                    {(selectedCategory || priceRange[1] < maxPrice || sortOption) && (
                        <motion.div

                            initial={{opacity: 0, y: -10}}
                            animate={{opacity: 1, y: 0}}
                            exit={{opacity: 0, y: -10}}
                            className="flex flex-wrap gap-2 mt-4"
                        >
                            {selectedCategory && (
                                <div
                                    className="px-3 py-1 bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 rounded-full text-sm flex items-center">
                                    {selectedCategory}
                                    <button onClick={() => setSelectedCategory("")} className="ml-2 focus:outline-none">
                                        <X className="h-3 w-3"/>
                                    </button>
                                </div>
                            )}
                            {priceRange[1] < maxPrice && (
                                <div
                                    className="px-3 py-1 bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 rounded-full text-sm flex items-center">
                                    €{priceRange[0]} - €{priceRange[1]}
                                    <button onClick={() => setPriceRange([0, maxPrice])}
                                            className="ml-2 focus:outline-none">
                                        <X className="h-3 w-3"/>
                                    </button>
                                </div>
                            )}
                            {sortOption && (
                                <div
                                    className="px-3 py-1 bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 rounded-full text-sm flex items-center">
                                    {sortOption === "price-asc" ? "Prix: Croissant" : "Prix: Décroissant"}
                                    <button onClick={() => setSortOption("")} className="ml-2 focus:outline-none">
                                        <X className="h-3 w-3"/>
                                    </button>
                                </div>
                            )}
                            {(selectedCategory || priceRange[1] < maxPrice || sortOption) && (
                                <button
                                    onClick={clearFilters}
                                    className="px-3 py-1 bg-neutral-100 dark:bg-neutral-800 text-neutral-800 dark:text-neutral-200 rounded-full text-sm hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors duration-300"
                                >
                                    Effacer les filtres
                                </button>
                            )}
                        </motion.div>
                    )}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    {filteredProducts.map((product) => (
                        <motion.div
                            key={product.id}
                            initial={{opacity: 0, y: 20}}
                            animate={{opacity: 1, y: 0}}
                            exit={{opacity: 0, y: -20}}
                            transition={{duration: 0.3}}
                            className="bg-white dark:bg-neutral-800 rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 flex flex-col"
                        >
                            <div className="relative h-64">
                                <img
                                    src={product.image}
                                    alt={product.title}
                                    className="w-full h-full object-cover"
                                />
                                {product.promotions && product.promotions.length > 0 && (
                                    <span
                                        className="absolute top-2 right-2 bg-neutral-800 text-white px-2 py-1 rounded text-sm">
              {product.promotions[0].discountPercentage}% OFF
            </span>
                                )}
                                {!product.availability && (
                                    <span
                                        className="absolute top-2 left-2 bg-neutral-600 text-white px-2 py-1 rounded text-sm">
              Rupture de stock
            </span>
                                )}
                            </div>
                            <div className="p-4 flex flex-col flex-grow">
                                <h3 className="text-xl font-semibold mb-2 text-neutral-800 dark:text-neutral-200">{product.title}</h3>
                                <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-2">{product.description}</p>
                                <div className="flex justify-between items-center mb-2">
                                    <span
                                        className="text-lg font-bold text-neutral-800 dark:text-neutral-200">€{product.price}</span>
                                    <span
                                        className={`text-sm ${product.availability ? 'text-neutral-600' : 'text-neutral-400'}`}>
              {product.availability ? 'En stock' : 'Rupture de stock'}
            </span>
                                </div>
                                <div className="flex justify-between items-center mb-4">
                                    <span
                                        className="text-sm text-neutral-600 dark:text-neutral-400">{product.material}</span>
                                    <span
                                        className="text-sm text-neutral-600 dark:text-neutral-400">Qualité: {product.quality}</span>
                                </div>
                                <div className="mt-auto flex justify-between">
                                    <button
                                        onClick={() => {
                                            setSelectedProduct(product);
                                            setShowDialog(true);
                                        }}
                                        className="px-4 py-2 text-sm rounded text-neutral-800 dark:text-neutral-200 hover:bg-neutral-200 dark:hover:bg-neutral-600 transition-colors duration-300"
                                    >
                                        Voir les détails
                                    </button>
                                    <button
                                        disabled={!product.availability}
                                        className={`px-4 py-2 text-sm rounded ${product.availability ? 'bg-neutral-800 dark:bg-neutral-200 text-white dark:text-black hover:bg-neutral-700' : 'bg-neutral-400 text-neutral-600 cursor-not-allowed'} transition-colors duration-300`}
                                    >
                                        <ShoppingCart className="inline-block mr-2 h-4 w-4"/>
                                        {product.availability ? 'Ajouter au panier' : 'Indisponible'}
                                    </button>
                                </div>
                            </div>
                        </motion.div>
                    ))}
                </div>
            </main>