'use client'

import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import carpetData from '../../carpetData.json'

interface Product {
  id: number
  title: string
  description: string
  price: string
  image: string
  availability: boolean
  category: { name: string }
  material: string
  quality: string
  length: number
  width: number
  weight: number
  color: string
  model: string
  reference: string
  subcategory: { name: string }
  type: { name: string }
  updatedAt: string
  promotions?: { discountPercentage: number }[]
}

export default function TapisPage() {
  const [products, setProducts] = useState<Product[]>(carpetData.products)
  const [filteredProducts, setFilteredProducts] = useState<Product[]>(carpetData.products)
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("")
  const [priceRange, setPriceRange] = useState([0, 6000])
  const [sortOption, setSortOption] = useState("")
  const [showDialog, setShowDialog] = useState(false)
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null)
  const [activeFilter, setActiveFilter] = useState("")
  const [isDarkMode, setIsDarkMode] = useState(false)

  useEffect(() => {
    filterProducts()
  }, [searchTerm, selectedCategory, priceRange, sortOption])

  const filterProducts = () => {
    let filtered = products.filter(product =>
      product.title.toLowerCase().includes(searchTerm.toLowerCase()) &&
      (selectedCategory === "" || product.category.name === selectedCategory) &&
      parseFloat(product.price) >= priceRange[0] && parseFloat(product.price) <= priceRange[1]
    )

    if (sortOption === "price-asc") {
      filtered.sort((a, b) => parseFloat(a.price) - parseFloat(b.price))
    } else if (sortOption === "price-desc") {
      filtered.sort((a, b) => parseFloat(b.price) - parseFloat(a.price))
    }

    setFilteredProducts(filtered)
  }

  const categories = Array.from(new Set(products.map(product => product.category.name)))
  const maxPrice = Math.max(...products.map(product => parseFloat(product.price)))

  const toggleFilter = (filter: string) => {
    setActiveFilter(activeFilter === filter ? "" : filter)
  }

  const clearFilters = () => {
    setSelectedCategory("")
    setPriceRange([0, maxPrice])
    setSortOption("")
    setActiveFilter("")
  }

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode)
  }

  return (
    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'bg-gray-900 text-gray-100' : 'bg-gray-100 text-gray-900'}`}>
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold">Notre Collection de Tapis</h1>
          <button
            onClick={toggleDarkMode}
            className={`p-2 rounded-full ${isDarkMode ? 'bg-yellow-400 text-gray-900' : 'bg-gray-800 text-yellow-400'}`}
          >
            {isDarkMode ? '‚òÄÔ∏è' : 'üåô'}
          </button>
        </div>

        <div className="mb-8">
          <div className="flex flex-col md:flex-row items-center justify-between mb-4 gap-4">
            <div className="relative w-full md:w-1/3">
              <input
                type="text"
                placeholder="Rechercher des tapis..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className={`w-full p-3 pl-10 border rounded-full focus:outline-none focus:ring-2 transition-all duration-300 ${
                  isDarkMode
                    ? 'bg-gray-800 border-gray-700 focus:ring-blue-500'
                    : 'bg-white border-gray-300 focus:ring-blue-300'
                }`}
              />
              <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">üîç</span>
            </div>
            <div className="flex gap-2">
              {['category', 'price', 'sort'].map((filter) => (
                <button
                  key={filter}
                  onClick={() => toggleFilter(filter)}
                  className={`px-4 py-2 text-sm border rounded transition-colors duration-200 ${
                    activeFilter === filter
                      ? isDarkMode
                        ? 'bg-blue-600 text-white'
                        : 'bg-blue-500 text-white'
                      : isDarkMode
                      ? 'bg-gray-800 border-gray-700'
                      : 'bg-white border-gray-300'
                  }`}
                >
                  {filter.charAt(0).toUpperCase() + filter.slice(1)} ‚ñº
                </button>
              ))}
            </div>
          </div>

          <AnimatePresence>
            {activeFilter !== "" && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
                className={`rounded-lg shadow-lg p-6 mb-6 ${
                  isDarkMode ? 'bg-gray-800' : 'bg-white'
                }`}
              >
                {activeFilter === "category" && (
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                    {categories.map((category) => (
                      <button
                        key={category}
                        onClick={() => setSelectedCategory(category)}
                        className={`px-4 py-2 text-sm border rounded transition-colors duration-200 ${
                          selectedCategory === category
                            ? isDarkMode
                              ? 'bg-blue-600 text-white'
                              : 'bg-blue-500 text-white'
                            : isDarkMode
                            ? 'bg-gray-700 border-gray-600'
                            : 'bg-gray-100 border-gray-300'
                        }`}
                      >
                        {category}
                      </button>
                    ))}
                  </div>
                )}
                {activeFilter === "price" && (
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <input
                        type="range"
                        min={0}
                        max={maxPrice}
                        step={100}
                        value={priceRange[0]}
                        onChange={(e) => setPriceRange([Number(e.target.value), priceRange[1]])}
                        className="w-full"
                      />
                      <input
                        type="range"
                        min={0}
                        max={maxPrice}
                        step={100}
                        value={priceRange[1]}
                        onChange={(e) => setPriceRange([priceRange[0], Number(e.target.value)])}
                        className="w-full"
                      />
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>‚Ç¨{priceRange[0]}</span>
                      <span>‚Ç¨{priceRange[1]}</span>
                    </div>
                  </div>
                )}
                {activeFilter === "sort" && (
                  <div className="space-y-2">
                    {['price-asc', 'price-desc'].map((option) => (
                      <button
                        key={option}
                        onClick={() => setSortOption(option)}
                        className={`w-full text-left px-4 py-2 text-sm border rounded transition-colors duration-200 ${
                          sortOption === option
                            ? isDarkMode
                              ? 'bg-blue-600 text-white'
                              : 'bg-blue-500 text-white'
                            : isDarkMode
                            ? 'bg-gray-700 border-gray-600'
                            : 'bg-gray-100 border-gray-300'
                        }`}
                      >
                        Prix: {option === 'price-asc' ? 'Croissant' : 'D√©croissant'}
                      </button>
                    ))}
                  </div>
                )}
              </motion.div>
            )}
          </AnimatePresence>

          {(selectedCategory || priceRange[0] > 0 || priceRange[1] < maxPrice || sortOption) && (
            <div className="flex flex-wrap gap-2 mt-4">
              {selectedCategory && (
                <div className={`px-2 py-1 rounded text-sm ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
                  {selectedCategory}
                  <button onClick={() => setSelectedCategory("")} className="ml-2">
                    ‚úï
                  </button>
                </div>
              )}
              {(priceRange[0] > 0 || priceRange[1] < maxPrice) && (
                <div className={`px-2 py-1 rounded text-sm ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
                  ‚Ç¨{priceRange[0]} - ‚Ç¨{priceRange[1]}
                  <button onClick={() => setPriceRange([0, maxPrice])} className="ml-2">
                    ‚úï
                  </button>
                </div>
              )}
              {sortOption && (
                <div className={`px-2 py-1 rounded text-sm ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
                  {sortOption === "price-asc" ? "Prix: Croissant" : "Prix: D√©croissant"}
                  <button onClick={() => setSortOption("")} className="ml-2">
                    ‚úï
                  </button>
                </div>
              )}
              <button
                onClick={clearFilters}
                className={`px-4 py-2 text-sm border rounded transition-colors duration-200 ${
                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-300'
                }`}
              >
                Effacer les filtres
              </button>
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {filteredProducts.map((product) => (
            <motion.div
              key={product.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
              className={`rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 ${
                isDarkMode ? 'bg-gray-800' : 'bg-white'
              }`}
            >
              <div className="relative h-64">
                <img
                  src={product.image}
                  alt={product.title}
                  className="w-full h-full object-cover"
                />
                {product.promotions && product.promotions.length > 0 && (
                  <div className="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded text-sm">
                    {product.promotions[0].discountPercentage}% OFF
                  </div>
                )}
                {!product.availability && (
                  <div className="absolute top-2 left-2 bg-gray-600 text-white px-2 py-1 rounded text-sm">
                    Rupture de stock
                  </div>
                )}
              </div>
              <div className="p-4">
                <h3 className="text-xl font-semibold mb-2">{product.title}</h3>
                <p className={`text-sm mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>{product.description}</p>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-lg font-bold">‚Ç¨{product.price}</span>
                  <span className={`text-sm ${product.availability ? 'text-green-500' : 'text-red-500'}`}>
                    {product.availability ? 'En stock' : 'Rupture de stock'}
                  </span>
                </div>
                <div className="flex justify-between items-center mb-4">
                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>{product.material}</span>
                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Qualit√©: {product.quality}</span>
                </div>
                <div className="flex justify-between">
                  <button
                    onClick={() => {
                      setSelectedProduct(product)
                      setShowDialog(true)
                    }}
                    className={`px-4 py-2 text-sm border rounded transition-colors duration-200 ${
                      isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-100 border-gray-300'
                    }`}
                  >
                    Voir les d√©tails
                  </button>
                  <button
                    disabled={!product.availability}
                    className={`px-4 py-2 text-sm rounded transition-colors duration-200 ${
                      product.availability
                        ? isDarkMode
                          ? 'bg-blue-600 text-white'
                          : 'bg-blue-500 text-white'
                        : 'bg-gray-300 text-gray-600 cursor-not-allowed'
                    }`}
                  >
                    üõí {product.availability ? 'Ajouter au panier' : 'Indisponible'}
                  </button>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>

      {showDialog && selectedProduct && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
          <div className={`p-6 rounded-lg max-w-md w-full ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
            <h2 className="text-2xl font-bold mb-4">{selectedProduct.title}</h2>
            <p className={`mb-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Informations d√©taill√©es sur le tapis.</p>
            <div className={`grid gap-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
              <p><strong>Dimensions:</strong> {selectedProduct.length}cm x {selectedProduct.width}cm</p>
              <p><strong>Poids:</strong> {selectedProduct.weight}kg</p>
              <p><strong>Couleur:</strong> {selectedProduct.color}</p>
              <p><strong>Mod√®le:</strong> {selectedProduct.model}</p>
              <p><strong>R√©f√©rence:</strong> {selectedProduct.reference}</p>
              <p><strong>Cat√©gorie:</strong> {selectedProduct.category.name}</p>
              <p><strong>Sous-cat√©gorie:</strong> {selectedProduct.subcategory.name}</p>
              <p><strong>Type:</strong> {selectedProduct.type.name}</p>
              <p><strong>Derni√®re mise √† jour:</strong> {new Date(selectedProduct.updatedAt).toLocaleDateString()}</p>
            </div>
            <button
              onClick={() => setShowDialog(false)}
              className={`mt-4 w-full font-bold py-2 px-4 rounded transition-colors duration-200 ${
                isDarkMode ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'
              }`}
            >
              Fermer
            </button>
          </div>
        </div>
      )}
    </div>
  )
}



                                className="w-full p-3 pl-10 border border-neutral-300 dark:border-neutral-700 rounded-full bg-white dark:bg-neutral-800 text-neutral-800 dark:text-neutral-200 focus:outline-none focus:ring-2 focus:ring-neutral-400 transition-all duration-300"
